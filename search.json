[{"path":"https://inbo.github.io/inbospatial/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behaviour participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behaviour may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. E.g. edit roxygen2 comment .R file R/, .Rd file man/.","code":""},{"path":"https://inbo.github.io/inbospatial/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reproducible example.","code":""},{"path":"https://inbo.github.io/inbospatial/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look GitHub Actions build status making changes. README contain badges continuous integration services used package. require tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://inbo.github.io/inbospatial/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://inbo.github.io/inbospatial/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://inbo.github.io/inbospatial/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://inbo.github.io/inbospatial/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Research Institute Nature Forest (INBO) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"dhmv-data","dir":"Articles","previous_headings":"","what":"DHMV Data","title":"Dissecting a WCS Query: DHMV Case Study.","text":"Flemish government agencies host lot useful web services data. available via web services can found : https://www.vlaanderen./datavindplaats/catalogus vignette demonstrates query elevation data Digital Elevation Model, Digitaal HoogteModel Vlaanderen (DHMV). “complicated way”, assembling Web Coverage Service (WCS) query. end, see use inbospatial get result single function call. vignette somewhat related , goes beyond use Web Feature Services (WFS) spatial data, see tutorial Thierry Onkelinx. particular, document paths workarounds explore errors occur default ows4R procedure. TL;DR: see ?inbospatial:get_coverage_wcs function query DHMV (WCS) data given point Flanders. example can found .","code":""},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"situationmotivation","dir":"Articles","previous_headings":"","what":"Situation/Motivation","title":"Dissecting a WCS Query: DHMV Case Study.","text":"purpose code query elevation data arbitrary location Flanders. can found : https://www.vlaanderen./datavindplaats/catalogus/wcs-digitaal-hoogtemodel-vlaanderen Unfortunately, documentation WCS sparse, let’s hope complies given standards. use Web Coverage Services (WCS), standardized Open Geospatial Consortium (OGC). info services can found “Geocomputation R” book, example. go-R package WCS ows4R Emmanuel Blondel contributors, available github. Unfortunately, neither geocomputation book’s example, vignette ows4R package, INBO tutorial transferred DHMV use case. code simply work. Therefore, ended going back nitty-gritty aspects WCS manually building query.","code":""},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"limits-of-ows4r-package","dir":"Articles","previous_headings":"","what":"Limits of ows4R Package","title":"Dissecting a WCS Query: DHMV Case Study.","text":"revealing solution, document error path working around : core problem trivial see, might run similar issues. , fact, ows4R package seems functional. tutorial mentioned , ows4R package used query data web services. However, ows4R handle niche server interfaces. First, need load packages. can connect WCS client. can easily query capabilities: grab info can find xml file: https://geo.api.vlaanderen./DHMV/wcs?service=WCS&request=getcapabilities Note capabilities xml holds lot valuable information: First foremost, search CoverageID; case, interested DHMVII_DTM_1m: grid coverage LIDAR elevation data Flanders. can also find Coordinate Reference System (CRS) crsSupported BD72 / Belgian Lambert 72. Always good know. Finally, capabilities xml provides version: 2.0.1 time writing. Yet keep mind bit. “capabilities” , per OGC standards, go-place finding WCS documentation. R, can receive information conveniently via ows4R. works via “coverage summary” … … coverage description. Finally, important know dimensions available: LON/LAT, x/y, maybe time? far, good. Now, following tutorials get real data: write file disk: … , maybe . function fails, somehow. Status quo: receive file (“mht” called “mht”), supposedly kind GeoTIFF image (asked image/tiff), yet wrapped data chunks. “Start tag expected, ‘<’ found” “open file SpatRaster:…” raw file “recognized supported file format. (GDAL error 4)” Maybe useful, ows4R briefly displays URL used attempt data query: https://geo.api.vlaanderen./DHMV/wcs?service=WCS&version=2.0.1&coverageId=DHMVII_DTM_1m&subset=x(148599,148601)&subset=y(208899,208901)&format=image/tiff&request=GetCoverage Let’s break URL : desired service indeed WCS, version 2.0.1 (guess) request, coverageID, format seem expected subset components respective dimensions. Feel free try paste URL browser download file. Still, downloaded file unreadable. Subtle symptom: even one adjusts subset (.e. bbox argument, ), received tif change size; download bbox-agnostic, speak. Opening file text editor vim, see XML part, generic binary stuff, hints GML. sample geoTIFFs online, look different, maybe . GML clearly geoTIFF, except maybe binary part (tried extract, avail). file download extension author’s OS browser. different OS, browser automatically extended “.mht”. fact, MHT file. .","code":"library(\"httr\") library(\"sf\") #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE library(\"terra\") #> terra 1.7.83 if (!requireNamespace(\"ows4R\", quietly = TRUE)) {   install.packages(\"ows4R\") } #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... library(\"ows4R\") wcs <- WCSClient$new(   \"https://geo.api.vlaanderen.be/DHMV/wcs\", \"2.0.1\",   logger = \"INFO\" ) #> [ows4R][INFO] OWSGetCapabilities - Fetching https://geo.api.vlaanderen.be/DHMV/wcs?service=WCS&version=2.0.1&request=GetCapabilities  #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% caps <- wcs$getCapabilities() feature <- \"DHMVII_DTM_1m\" dtm_smry <- caps$findCoverageSummaryById(feature, exact = TRUE) dtm_smry #> <WCSCoverageSummary> #> ....|-- CoverageId: DHMVII_DTM_1m #> ....|-- CoverageSubtype: GridCoverage #> ....|-- WGS84BoundingBox <OWSWGS84BoundingBox> #> ........|-- LowerCorner: 2.52 50.64 #> ........|-- UpperCorner: 5.94 51.51 # Get description from the WCS client dtm_des <- wcs$describeCoverage(feature) #> [ows4R][INFO] WCSClient - Fetching coverageSummary description for 'DHMVII_DTM_1m' ...  #> [ows4R][INFO] WCSDescribeCoverage - Fetching https://geo.api.vlaanderen.be/DHMV/wcs?service=WCS&version=2.0.1&coverageId=DHMVII_DTM_1m&request=DescribeCoverage  #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% dtm_des #> <WCSCoverageDescription> #> ....|-- boundedBy  [srsName=http://www.opengis.net/def/crs/EPSG/0/31370,axisLabels=x y,uomLabels=Meter Meter,srsDimension=2] <GMLEnvelope> #> ........|-- lowerCorner: 17000 148000 #> ........|-- upperCorner: 264000 250000 #> ....|-- domainSet  [gml:id=grid_DHMVII_DTM_1m,dimension=2] <GMLRectifiedGrid> #> ........|-- limits <GMLGridEnvelope> #> ............|-- low: 0 0 #> ............|-- high: 246999 101999 #> ........|-- axisLabels  #> ............|-- value: x y #> ........|-- origin  [gml:id=grid_origin_DHMVII_DTM_1m,srsName=http://www.opengis.net/def/crs/EPSG/0/31370] <GMLPoint> #> ............|-- pos: 17000.5 249999.5 #> ........|-- offsetVector  [srsName=EPSG:31370,srsDimension=2]  #> ............|-- value: 1 0 #> ........|-- offsetVector  [srsName=EPSG:31370,srsDimension=2]  #> ............|-- value: 0 -1 #> ....|-- rangeType <SWEDataRecord> #> ........|-- field <SWEQuantity> #> ............|-- description  #> ................|-- value: Band 1 #> ............|-- nilValues <SWENilValues> #> ................|-- nilValue  [reason=http://www.opengis.net/def/nil/OGC/0/inapplicable]  #> ....................|-- value: -9999 #> ............|-- uom  [code=unknown]  #> ............|-- constraint  #> ................|-- AllowedValues  #> ....................|-- interval  #> ........................|-- value: -99.890144 354.144226 #> ....|-- CoverageId  #> ........|-- value: DHMVII_DTM_1m #> ....|-- ServiceParameters <ISOElementSequence> #> ........|-- CoverageSubtype: RectifiedGridCoverage #> ........|-- nativeFormat: image/tiff dtm_dims <- dtm_smry$getDimensions() #> [ows4R][INFO] WCSCoverageSummary - Fetching Coverage envelope dimensions by CRS interpretation #> No encoding supplied: defaulting to UTF-8. dtm_dims #> [[1]] #> [[1]]$label #> [1] \"x\" #>  #> [[1]]$uom #> [1] \"Meter\" #>  #> [[1]]$type #> [1] \"geographic\" #>  #>  #> [[2]] #> [[2]]$label #> [1] \"y\" #>  #> [[2]]$uom #> [1] \"Meter\" #>  #> [[2]]$type #> [1] \"geographic\" x_test <- 148600 y_test <- 208900 range_m <- 2 # (+/- m)  hopo_boxed <- OWSUtils$toBBOX(   xmin = x_test - range_m,   xmax = x_test + range_m,   ymin = y_test - range_m,   ymax = y_test + range_m   ) mht_file <- tempfile(fileext = \".mht\")  tryCatch({   dtm_data <- dtm_smry$getCoverage(     bbox = hopo_boxed,     filename = mht_file     )   }, error = function(err) message(err) ) #> [ows4R][WARN] WCSCoverageSummary - Coverage without temporal dimension: 'time' argument is ignored  #> [ows4R][WARN] WCSCoverageSummary - Coverage without vertical dimension: 'elevation' argument is ignored  #> <GMLEnvelope> #> ....|-- lowerCorner: 148598 208898 #> ....|-- upperCorner: 148602 208902[ows4R][INFO] WCSGetCoverage - Fetching https://geo.api.vlaanderen.be/DHMV/wcs?service=WCS&version=2.0.1&coverageId=DHMVII_DTM_1m&subset=x(148598,148602)&subset=y(208898,208902)&format=image/tiff&request=GetCoverage  #>   |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100% #> Start tag expected, '<' not found #> Warning in new_CppObject_xp(fields$.module, fields$.pointer, ...): GDAL Error #> 4: `/tmp/RtmpNYlaDW/file1f753c7866af.mht' not recognized as a supported file #> format. #> Error: [rast] cannot open this file as a SpatRaster: /tmp/RtmpNYlaDW/file1f753c7866af.mht"},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"the-lead-qgis","dir":"Articles","previous_headings":"","what":"The Lead: QGIS","title":"Dissecting a WCS Query: DHMV Case Study.","text":"Well, advanced software open GeoTIFF’esque files. geography markup. least software might able identify actually . First, R failed, Python might work. … doesn’t recognize file type raster data. QGIS? “Spatial Without Compromise”, advertise. Unfortunately, program also unable open file downloaded R. However, QGIS can actually connect WCS directly. help much need data R. Yet, . Look behold: QGIS can actually connect <https://geo.api.vlaanderen./DHMV/wcs> query elevation data Flanders; good indication WCS , somehow, functional. zoom move, export images. even export data. stopped exporting data threatened entirely fill tiny system partition (raster data 100GB) - good confirmation want web services . , luckily, careless map movement, received error output QGIS. , QGIS gave working URL query DHMV: https://geo.api.vlaanderen./DHMV/wcs?SERVICE=WCS&VERSION=1.0.0&REQUEST=GetCoverage&FORMAT=GeoTIFF&COVERAGE=DHMVII_DTM_1m&BBOX=162064,165735,170953,168882&CRS=EPSG:31370&RESPONSE_CRS=EPSG:31370&WIDTH=1622&HEIGHT=574  Let’s dissect URL.","code":"import rasterio import rasterio.plot  data_name = \"/tmp/test_hopo.tif\" tiff = rasterio.open(data_name) rasterio.plot.show(tiff, title = \"will this work? no!\")"},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"the-solution-query-building","dir":"Articles","previous_headings":"","what":"The Solution: Query Building","title":"Dissecting a WCS Query: DHMV Case Study.","text":"start question mark URL, split every ampersand, can extract following components (correct) QGIS URL: Compare (unsuccessful) ows4R attempt: can selectively shuffle adjust components, generalizing working query learning WCS interface. feels bit like fuzzing WCS. found: service (WCS) request (DHMVII_DTM_1m) correct; latter swapped different datasets coverage correct keyword reading DHMVII_DTM_1m version must 1.0.0; currently work 2.0.1 instead subsetting, can use bbox… … width height output image mandatory; alternatively resx resy (shown) must specify CRS (EPSG:31370), optionally also response_crs format GeoTIFF; slashes weird URLs anyway trial error, construct working URLs R generalize function. Example usage: Voilà! can now get elevation given location Flanders via DHMV web services. Major grain salt: use latest version, v2.0.1, DHMV WCS. minor limitation, taken seriously: old versions become obsolete, break, stop data updates.","code":"get_elevation_wcs <- function(x, y, range_m = 1, tiff_file = NULL) {   # Please note that this function lacks a lot of   # assertions and documentation.    # get bbox   bbox <- paste(x - range_m, x + range_m,                y - range_m, y + range_m,                sep = \",\")    # the URL components   base_url <- \"https://geo.api.vlaanderen.be\"   endpoint <- \"/DHMV/wcs\" # nolint: absolute_path_linter    # the query parameters which worked in QGIS   elevation_query <- list(     service = \"WCS\",     version = \"1.0.0\",     request = \"GetCoverage\",     format = \"GeoTIFF\",     coverage = \"DHMVII_DTM_1m\",     bbox = bbox,     width = 2 * range_m,     height = 2 * range_m,     crs = \"EPSG:31370\"   )    # get wcs data   if (is.null(tiff_file)) {     tiff_file <- tempfile(fileext = \".tiff\")   }   GET(url = modify_url(base_url, path = endpoint),       query = elevation_query,       write_disk(tiff_file))   # note: saving this to a file is optional,   # but might prevent double download or loss of data    # re-read raster file   data <- rast(tiff_file)    return(data)  } x_test <- 148600 y_test <- 208900 range_m <- 10 # (+/- m) test_raster <- get_elevation_wcs(x_test, y_test, range_m = range_m)  # we can extract a value at a point: extract(test_raster, cbind(x_test, y_test))[[1]] #> [1] 9.899891"},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"using-version-2-0-1","dir":"Articles","previous_headings":"","what":"Using Version 2.0.1","title":"Dissecting a WCS Query: DHMV Case Study.","text":"Apparently, exact symptoms failing query somewhat depending browser operating system. browser might detect file mht, . example build query current version DHMV: mht specifications found online, possible create unpacking function, become part package. way get elevation data extracted:","code":"url <- parse_url(\"https://geo.api.vlaanderen.be/DHMV/wcs\")  # the query parameters which worked in QGIS url$query <- list(   SERVICE = \"WCS\",   VERSION = \"2.0.1\",   REQUEST = \"GetCoverage\",   FORMAT = \"image/tiff\",   COVERAGEID = \"DHMVII_DTM_1m\",   SUBSET = \"x,http://www.opengis.net/def/crs/EPSG/0/EPSG:31370(148000,149000)\",   SUBSET = \"y,http://www.opengis.net/def/crs/EPSG/0/EPSG:31370(208000,209000)\",   SCALEFACTOR = \"1\",   CRS = \"EPSG:31370\",   RESPONSE_CRS = \"EPSG:31370\" )  request <- build_url(url)   # get wcs data mht_file <- tempfile(fileext = \".mht\")  print(request) #> [1] \"https://geo.api.vlaanderen.be/DHMV/wcs?SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage&FORMAT=image%2Ftiff&COVERAGEID=DHMVII_DTM_1m&SUBSET=x%2Chttp%3A%2F%2Fwww.opengis.net%2Fdef%2Fcrs%2FEPSG%2F0%2FEPSG%3A31370%28148000%2C149000%29&SUBSET=y%2Chttp%3A%2F%2Fwww.opengis.net%2Fdef%2Fcrs%2FEPSG%2F0%2FEPSG%3A31370%28208000%2C209000%29&SCALEFACTOR=1&CRS=EPSG%3A31370&RESPONSE_CRS=EPSG%3A31370\" print(mht_file) #> [1] \"/tmp/RtmpNYlaDW/file1f751102f7a8.mht\"  response <- GET(url = request,           write_disk(mht_file)) library(\"readr\") library(\"stringr\")  unpack_mht <- function(mht_filepath) {   lines_raw <- read_lines_raw(mht_filepath)   lines_char <- suppressWarnings(read_lines(mht_filepath))   raw_vector <- read_file_raw(mht_filepath)    start <- which(str_detect(lines_char, \"^II\\\\*\"))   end <- length(lines_raw) - 1   pos_start <- length(unlist(lines_raw[1:(start - 1)])) + start   pos_end <- length(raw_vector) - (length(lines_raw[end + 1]) + 1)    tif <- raw_vector[pos_start:pos_end]   tif_path <- str_replace(mht_filepath, \"mht\", \"tif\")   write_file(     tif,     tif_path   )   return(tif_path) } tif_file <- unpack_mht(mht_file) raster <- rast(tif_file) plot(raster, col = gray.colors(256))"},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"the-inbospatial-way","dir":"Articles","previous_headings":"","what":"The “inbospatial” Way","title":"Dissecting a WCS Query: DHMV Case Study.","text":"Colleague Hans Van Calster facing problems related WCS layers year earlier, wrote function `inbospatial` package. now refined get_coverage_wcs() procedure solve mht issue. use , case :  function gives quite options WCS layers query data . quick glance, found dtm WCS seems include canopy points, according definition; see : https://www.neonscience.org/resources/learning-hub/tutorials/chm-dsm-dtm general advice confirm data region know. addition, oi-omz oi-omw “zummer” winter ortho-mosaic images. burden choice!","code":"bbox <- sf::st_bbox(    c(xmin = 148000, xmax = 149000, ymin = 208000, ymax = 209000),    crs = sf::st_crs(31370) ) hopo_raster <- inbospatial::get_coverage_wcs(   wcs = \"dhmv\",   bbox = bbox,   layername = \"DHMVII_DTM_1m\",   version = \"2.0.1\",   wcs_crs = \"EPSG:31370\",   resolution = 1 )  plot(hopo_raster, col = gray.colors(256))"},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"post-mortem","dir":"Articles","previous_headings":"","what":"Post Mortem","title":"Dissecting a WCS Query: DHMV Case Study.","text":"value vignette seems limited: essence, provides specific query function arguments elevation model queries geo.api WCS Flemish digital services. Quite niche use case. However, also story tracing errors existing tools, scraping tools hints. Can actually trace error back source? pure co-incidence QGIS provided working link, general strategies? colleague @florisvdh pointed , QGIS generally good heuristics infer web service URL, choose parameter values work. web service layer successfully loaded QGIS, one can inspect URLs metadata layer properties. QGIS dialogue add web service layer also helpful exploring available layers web service. retrospective, initial issue worsened unfavourable circumstances. ows4R retrieved file produced error; another error thrown downstream. Neither ows4R, terra, sf, rasterio, qgis able handle mht files. lack support questions WCS design choice packing sending mht. Documentation geo.api.vlaanderen.WCS lacking (find ); particularly missed usage examples, vignettes, tests. colleagues Digitaal Vlaanderen DHMV group certainly enough work table, yet documentation desirable. ows4R, judging github issue list (see e.g. one). hand, QGIS free- open source, queries seem well maintained accessible, errors transparent, read source code - good example piece software. Yet general, run issues like , hesitate contact support file github issue. need fuzz WCS. Thank reading, may spatial queries successful!","code":""},{"path":"https://inbo.github.io/inbospatial/articles/spatial_dhmv_query.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Dissecting a WCS Query: DHMV Case Study.","text":"DHMV Data Situation/Motivation Limits ows4R Package Lead: QGIS Solution: Query Building Using Version 2.0.1 “inbospatial” Way Post Mortem","code":""},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example use cases to get data from web feature or web coverage services.","text":"WFS Web Feature Service allows download vector spatial data web. WCS Web Coverage Service similar, used raster spatial data. vignette, show functions get_feature_wfs() get_coverage_wcs() can used get data R session services. -depth explanation WFS services, refer INBO tutorial WFS. tutorial takes hands-coding approach getting data WFS, whereas vignette much coding stuff hidden away get_feature_wfs() function.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"simple-use-case-without-filter","dir":"Articles","previous_headings":"WFS examples","what":"Simple use case without filter","title":"Example use cases to get data from web feature or web coverage services.","text":"test case, query municipal boundaries Flanders “Provisional Reference Municipal Boundaries” (VRBG, Voorlopig ReferentieBestand Gemeentegrenzen), available via API vlaanderen.website. can achieve (almost) result using combination sf::read_sf() sf::st_transform(). methods yield result. Note however examples, may notice substantial differences, notably field specifications. reason differences get_feature_wfs() retrieves whatever information identified WFS request - way paste request browser. result saved temporarily .GML file read sf::read_sf(). Passing WFS directly dsn argument sf::read_sf, hand, translate request form pass GDAL WFS driver, handles field specifications reading DescribeFeatureType request: first opening, content result GetCapabilities request appended file, can cached later openings dataset. applies DescribeFeatureType request issued discover field definition layer.","code":"wfs_vrbg <- \"https://geo.api.vlaanderen.be/VRBG/wfs\"  provinces <- get_feature_wfs(   wfs = wfs_vrbg,   layername = \"VRBG:Refprv\",   crs = \"EPSG:31370\" )  provinces #> Simple feature collection with 5 features and 7 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 21991.63 ymin: 153058.3 xmax: 258871.8 ymax: 244027.2 #> Projected CRS: BD72 / Belgian Lambert 72 #> # A tibble: 5 × 8 #>   gml_id    UIDN  OIDN TERRID NAAM       NISCODE NUTS2                     SHAPE #>   <chr>    <dbl> <dbl>  <dbl> <chr>      <chr>   <chr>        <MULTISURFACE [m]> #> 1 Refprv.1    18     2    357 Antwerpen  10000   BE21  (POLYGON ((178136.3 2440… #> 2 Refprv.2    19     4    359 Vlaams Br… 20001   BE24  (POLYGON ((200484.9 1935… #> 3 Refprv.3    20     3    351 West-Vlaa… 30000   BE25  (POLYGON ((80681.53 2276… #> 4 Refprv.4    21     1    355 Limburg    70000   BE22  (POLYGON ((231494.3 2191… #> 5 Refprv.5    22     5    356 Oost-Vlaa… 40000   BE23  (POLYGON ((145735.2 2203… provinces2 <- read_sf(paste0(\"WFS:\", wfs_vrbg),   layer = \"VRBG:Refprv\" )  waldo::compare(provinces, provinces2,   x_arg = \"inbospatial\", y_arg = \"sf\",   max_diffs = 8 ) #> ✔ No differences"},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"apply-a-cql-filter-to-filter-on-a-field","dir":"Articles","previous_headings":"WFS examples","what":"Apply a CQL-Filter to filter on a field","title":"Example use cases to get data from web feature or web coverage services.","text":"CQL, “Common Query Language” (see , example), provides way filter WFS data. syntax CQL comparable SQL, yet differences data types structures. can provide apply filters get_feature_wfs() via cql_filter argument. , also used sf::read_sf() combination OGR SQL query: methods yield result.","code":"wfs_vrbg <- \"https://geo.api.vlaanderen.be/VRBG/wfs\"  prov <- get_feature_wfs(   wfs = wfs_vrbg,   layername = \"VRBG:Refprv\",   cql_filter = \"NAAM='West-Vlaanderen'\" )  prov #> Simple feature collection with 1 feature and 7 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 21991.63 ymin: 155928.6 xmax: 90410.78 ymax: 229724.6 #> Projected CRS: BD72 / Belgian Lambert 72 #> # A tibble: 1 × 8 #>   gml_id    UIDN  OIDN TERRID NAAM       NISCODE NUTS2                     SHAPE #>   <chr>    <dbl> <dbl>  <dbl> <chr>      <chr>   <chr>        <MULTISURFACE [m]> #> 1 Refprv.3    20     3    351 West-Vlaa… 30000   BE25  (POLYGON ((80681.53 2276… prov2 <- read_sf(paste0(\"WFS:\", wfs_vrbg),   query = \"SELECT * FROM Refprv WHERE NAAM='West-Vlaanderen'\" )  waldo::compare(prov, prov2) #> ✔ No differences"},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"request-a-subset-of-fields","dir":"Articles","previous_headings":"WFS examples","what":"Request a subset of fields","title":"Example use cases to get data from web feature or web coverage services.","text":"Instead querying complete data table, one can select subset variables (fields). function get_feature_wfs() provides property_name keyword , accepts string comma-separated field names. Note field names capitalized particular geoserver. , can use sf::read_sf() combination OGR SQL query:","code":"wfs_vrbg <- \"https://geo.api.vlaanderen.be/VRBG/wfs\"  prov_fields <- get_feature_wfs(   wfs = wfs_vrbg,   layername = \"VRBG:Refprv\",   crs = \"EPSG:31370\",   property_name = paste(\"NAAM\", \"NUTS2\", \"SHAPE\", sep = \",\") )  prov_fields #> Simple feature collection with 5 features and 2 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 21991.63 ymin: 153058.3 xmax: 258871.8 ymax: 244027.2 #> Projected CRS: BD72 / Belgian Lambert 72 #> # A tibble: 5 × 3 #>   NAAM            NUTS2                                                    SHAPE #>   <chr>           <chr>                                       <MULTISURFACE [m]> #> 1 Antwerpen       BE21  (POLYGON ((178136.3 244009.2, 178131.2 244010.4, 178133… #> 2 Vlaams Brabant  BE24  (POLYGON ((200484.9 193541, 200484.8 193541.2, 200484.5… #> 3 West-Vlaanderen BE25  (POLYGON ((80681.53 227626.5, 80777.99 228143, 80661.88… #> 4 Limburg         BE22  (POLYGON ((231494.3 219142.5, 231194.3 219455.2, 230929… #> 5 Oost-Vlaanderen BE23  (POLYGON ((145735.2 220358.3, 145217.2 220640.1, 145216… prov_fields_sf <- read_sf(paste0(\"WFS:\", wfs_vrbg),   query = \"SELECT NAAM, NUTS2 FROM Refprv\" )  waldo::compare(prov_fields, prov_fields_sf) #> ✔ No differences"},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"meteorological-data-example","dir":"Articles","previous_headings":"WFS examples","what":"Meteorological data example","title":"Example use cases to get data from web feature or web coverage services.","text":"Another example WFS API Belgian Royal Meteorological Institute (KMI, Koninklijk Meteorologisch Instituut van België). Details can found , . list KMI stations. can plot leaflet mapview see stations map learn -instance- Ukkel code 6447. let’s extract maximum daily temperatures Ukkel starting year 2000.","code":"kmi <- \"https://opendata.meteo.be/service/wfs\"  kmi_stations <- get_feature_wfs(   wfs = kmi,   layer = \"synop:synop_station\" )  kmi_stations #> Simple feature collection with 22 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 2.887306 ymin: 49.62036 xmax: 6.073438 ymax: 51.34738 #> Geodetic CRS:  WGS 84 #> # A tibble: 22 × 5 #>    gml_id           name  altitude date_end                       the_geom #>    <chr>            <chr>    <dbl> <dttm>                      <POINT [°]> #>  1 synop_station.6… SPA …    482   NA                  (5.909864 50.47861) #>  2 synop_station.6… SAIN…    557   NA                  (5.403753 50.03887) #>  3 synop_station.6… BEIT…     24.8 NA                  (3.121692 50.90398) #>  4 synop_station.6… ZEEB…     12.1 NA                  (3.201846 51.34737) #>  5 synop_station.6… STAB…      4   NA                   (4.363798 51.3248) #>  6 synop_station.6… UCCL…    101.  2003-12-09 08:00:00 (4.357871 50.79686) #>  7 synop_station.6… UCCL…    101.  NA                  (4.357871 50.79686) #>  8 synop_station.6… DIEP…     39.3 NA                  (5.450296 50.91546) #>  9 synop_station.6… BIER…    178   NA                  (5.458738 50.64528) #> 10 synop_station.6… SINT…      8.3 NA                  (4.524608 51.07512) #> # ℹ 12 more rows kmi_synop <- get_feature_wfs(   wfs = kmi,   layername = \"synop:synop_data\",   property_name = paste(     \"code\", \"timestamp\", \"temp_max\", \"the_geom\",     sep = \",\"   ),   cql_filter = \"((code = 6447) AND (temp_max IS NOT NULL) AND     (timestamp >= '2000-01-01 00:00:00.000'))\" )  kmi_synop #> Simple feature collection with 9074 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4.357871 ymin: 50.79666 xmax: 4.357875 ymax: 50.79686 #> Geodetic CRS:  WGS 84 #> # A tibble: 9,074 × 4 #>     code timestamp           temp_max            the_geom #>    <int> <dttm>                 <dbl>         <POINT [°]> #>  1  6447 2021-08-06 18:00:00     20.6 (4.357871 50.79686) #>  2  6447 2021-09-17 18:00:00     22.2 (4.357871 50.79686) #>  3  6447 2021-09-16 18:00:00     20.9 (4.357871 50.79686) #>  4  6447 2021-09-18 18:00:00     23   (4.357871 50.79686) #>  5  6447 2021-09-19 18:00:00     21.7 (4.357871 50.79686) #>  6  6447 2021-09-20 18:00:00     19   (4.357871 50.79686) #>  7  6447 2021-09-21 18:00:00     18.3 (4.357871 50.79686) #>  8  6447 2021-09-22 18:00:00     19.8 (4.357871 50.79686) #>  9  6447 2021-08-07 18:00:00     20.6 (4.357871 50.79686) #> 10  6447 2021-08-08 18:00:00     20.1 (4.357871 50.79686) #> # ℹ 9,064 more rows"},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"spatial-filtering-using-a-bounding-box","dir":"Articles","previous_headings":"WFS examples","what":"Spatial filtering using a bounding box","title":"Example use cases to get data from web feature or web coverage services.","text":"analyses require whole countries’ data, even country small Belgium. Hence, might useful restricting data query bounding box. works follows, using bbox elements xmin, ymin, xmax, ymax. returns MULTISURFACE geometry type. can use couple sf functions cast regular polygons:  can also done using wkt_filter argument sf::read_sf.","code":"wfs_bwk <-   \"https://geo.api.vlaanderen.be/BWK/wfs\"  bwk_bbox <- get_feature_wfs(   wfs = wfs_bwk,   layername = \"BWK:Bwkhab\",   crs = \"EPSG:31370\",   bbox = c(xmin = 142600, ymin = 153800, xmax = 146000, ymax = 156900) )  bwk_bbox #> Simple feature collection with 668 features and 32 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 137307.1 ymin: 153734.4 xmax: 146672.9 ymax: 160747.2 #> Projected CRS: BD72 / Belgian Lambert 72 #> # A tibble: 668 × 33 #>    gml_id      UIDN   OIDN TAG   EVAL  EENH1 EENH2 EENH3 EENH4 EENH5 EENH6 EENH7 #>    <chr>      <dbl>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #>  1 Bwkhab.6… 1.33e6 7.69e5 3785… z     va    qe    vc    NA    NA    NA    NA    #>  2 Bwkhab.6… 7.29e5 7.06e5 5330… w     ni    que   NA    NA    NA    NA    NA    #>  3 Bwkhab.7… 1.37e6 8.15e5 2468… m     ur    NA    NA    NA    NA    NA    NA    #>  4 Bwkhab.9… 1.59e6 1.01e6 4050… wz    hr    hc-   NA    NA    NA    NA    NA    #>  5 Bwkhab.6… 1.32e6 7.57e5 4075… m     ua    NA    NA    NA    NA    NA    NA    #>  6 Bwkhab.7… 7.35e5 7.12e5 5393… z     fe    NA    NA    NA    NA    NA    NA    #>  7 Bwkhab.7… 1.38e6 8.19e5 3947… z     cg    NA    NA    NA    NA    NA    NA    #>  8 Bwkhab.9… 7.57e5 7.35e5 5779… w     pmp   lar   NA    NA    NA    NA    NA    #>  9 Bwkhab.8… 1.53e6 9.52e5 3975… mwz   hp    n     kh    NA    NA    NA    NA    #> 10 Bwkhab.7… 7.35e5 7.13e5 5394… w     pmb   lar   cas   NA    NA    NA    NA    #> # ℹ 658 more rows #> # ℹ 21 more variables: EENH8 <chr>, V1 <chr>, V2 <chr>, V3 <chr>, HERK <chr>, #> #   INFO <chr>, BWKLABEL <chr>, HAB1 <chr>, PHAB1 <int>, HAB2 <chr>, #> #   PHAB2 <int>, HAB3 <chr>, PHAB3 <int>, HAB4 <chr>, PHAB4 <int>, HAB5 <chr>, #> #   PHAB5 <int>, HERKHAB <chr>, HERKPHAB <chr>, HABLEGENDE <chr>, #> #   SHAPE <MULTISURFACE [m]> bwk_bbox %>%   st_cast(\"GEOMETRYCOLLECTION\") %>%   st_collection_extract(\"POLYGON\") %>%   st_geometry() %>%   plot() bwk_bbox_sf <- read_sf(   paste0(\"WFS:\", wfs_bwk),   layer = \"BWK:Bwkhab\",   wkt_filter = st_as_text(     st_as_sfc(       st_bbox(         c(xmin = 142600, ymin = 153800, xmax = 146000, ymax = 156900),         crs = st_crs(31370)       )     )   ) )"},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"spatial-filters-using-spatial-binary-predicates","dir":"Articles","previous_headings":"WFS examples","what":"Spatial filters using spatial binary predicates","title":"Example use cases to get data from web feature or web coverage services.","text":"addition filters , can use logical operations restrict area interest. example, features can selected intersection another geographical object.","code":""},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"intersects-a-point","dir":"Articles","previous_headings":"WFS examples > Spatial filters using spatial binary predicates","what":"Intersects a point","title":"Example use cases to get data from web feature or web coverage services.","text":"proof concept, can directly query soil parameters specific location. theory, also possible “sf way”. However, sf filters query (takes long time), code work correctly.","code":"wfs_soiltypes <-   \"https://www.dov.vlaanderen.be/geoserver/bodemkaart/bodemtypes/wfs\"  x_lam <- 173995 y_lam <- 212093  soil_type <- get_feature_wfs(   wfs = wfs_soiltypes,   layername = \"bodemkaart:bodemtypes\",   crs = \"EPSG:31370\",   cql_filter = sprintf(     \"INTERSECTS(geom,POINT(%s %s))\",     x_lam, y_lam   ) )  soil_type #> Simple feature collection with 1 feature and 45 fields #> Geometry type: MULTISURFACE #> Dimension:     XY #> Bounding box:  xmin: 173846.5 ymin: 211962.5 xmax: 174030.9 ymax: 212190 #> Projected CRS: BD72 / Belgian Lambert 72 #> # A tibble: 1 × 46 #>   gml_id             gid id_kaartvlak Bodemtype Unibodemtype Bodemserie #> * <chr>            <int>        <int> <chr>     <chr>        <chr>      #> 1 bodemtypes.72727 67754        67754 s-Pgp3(v) s-Pgp3(v)    Pgp        #> # ℹ 40 more variables: Beknopte_omschrijving_bodemserie <chr>, #> #   Substraat_legende <chr>, Gegeneraliseerde_legende <chr>, #> #   Substraat_code <chr>, Substraat_Vlaanderen <chr>, Textuurklasse_code <chr>, #> #   Textuurklasse <chr>, Drainageklasse_code <chr>, Drainageklasse <chr>, #> #   Profielontwikkelingsgroep_code <chr>, Profielontwikkelingsgroep <chr>, #> #   Fase_code <chr>, Fase <chr>, Variante_van_het_moedermateriaal_code <chr>, #> #   Variante_van_het_moedermateriaal <chr>, … soil_type_sf <- read_sf(   paste0(\"WFS:\", wfs_soiltypes),   query = \"SELECT * FROM bodemtypes\",   wkt_filter = sprintf(     \"ST_Intersects(geom,ST_Point(%s, %s))\",     x_lam, y_lam   ) )  soil_type_sf"},{"path":"https://inbo.github.io/inbospatial/articles/wfs_wcs.html","id":"wcs-examples","dir":"Articles","previous_headings":"","what":"WCS examples","title":"Example use cases to get data from web feature or web coverage services.","text":", covered Web Feature Services (WFS), many kinds vector data. Another common geographical data type grid-like “raster” data, can retrieve via Web Coverage Services (WCS). Behold, get_coverage_wcs() available web services regularly use INBO. example false-colour infrared image. three bands image visualized using terra::plotRGB.  Another example, time extracting digital terrain model bounding box:  details WCS can found spatial_dhmv_query.Rmd vignette.","code":"bbox <- sf::st_bbox(   c(xmin = 99477, xmax = 99541, ymin = 172580, ymax = 172640),   crs = sf::st_crs(31370) ) omz <- get_coverage_wcs(   wcs = \"omz\",   bbox = bbox,   layername = \"OI.OrthoimageCoverage.OMZ.CIR\",   resolution = 1,   version = \"1.0.0\" ) terra::plotRGB(omz) dtm <- get_coverage_wcs(   wcs = \"dtm\",   bbox = bbox,   layername = \"EL.GridCoverage.DTM\",   resolution = 1) terra::plot(dtm)"},{"path":"https://inbo.github.io/inbospatial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hans Van Calster. Author, maintainer.            Research Institute Nature Forest (INBO) Floris Vanderhaeghe. Contributor.            Research Institute Nature Forest (INBO) Falk Mielke. Contributor.            Research Institute Nature Forest (INBO) . Copyright holder, funder.","code":""},{"path":"https://inbo.github.io/inbospatial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Van Calster, Hans (2024) inbospatial: Collection Useful R Functions Spatial Data. Version 0.0.3. https://inbo.github.io/inbospatial/","code":"@Manual{,   title = {inbospatial: A Collection of Useful R Functions for Spatial Data. Version 0.0.3},   author = {Hans {Van Calster}},   year = {2024},   url = {https://inbo.github.io/inbospatial/},   abstract = {Useful R functions developed at the Research Institute for Nature and Forest (INBO) for dealing with spatial raster or vector data.},   keywords = {spatial; geospatial; utilities; GIS; raster; vector}, }"},{"path":"https://inbo.github.io/inbospatial/index.html","id":"inbospatial","dir":"","previous_headings":"","what":"A Collection of Useful R Functions for Spatial Data","title":"A Collection of Useful R Functions for Spatial Data","text":"goal inbospatial share useful R functions dealing spatial raster vector data. functions mostly written part scientific projects conducted Research Institute Nature Forest. Although scope functions might pretty niche, others may relevant broader research community.","code":""},{"path":"https://inbo.github.io/inbospatial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Collection of Useful R Functions for Spatial Data","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"inbo/inbospatial\")"},{"path":"https://inbo.github.io/inbospatial/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Collection of Useful R Functions for Spatial Data","text":"basic example shows solve common problem:","code":"# library(inbospatial) ## basic example code"},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":null,"dir":"Reference","previous_headings":"","what":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"add_wms_*() functions shorthand alternatives fully specified leaflet::addWMSTiles() leaflet.extras2::addWMS() statement. Appropriate attribution added Leaflet map depending layer.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"","code":"add_wms_be_cartoweb(   map,   layer = c(\"topo\", \"topo_grey\", \"overlay\", \"crossborder\"),   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE),   ... )  add_wms_be_ortho(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE),   ... )  add_wms_nl_ortho(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE),   ... )  add_wms_fl_grbmap(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE),   ... )  add_wms_fl_habitatmap(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 1200),   add_wms_legend = FALSE,   ... )  add_wms_fl_habitatlabels(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE),   ... )  add_wms_fl_forestnature(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 600),   add_wms_legend = FALSE,   ... )  add_wms_fl_agriculture(   map,   year,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 1200),   add_wms_legend = FALSE,   ... )  add_wms_nlnb_nnb(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 600),   add_wms_legend = FALSE,   ... )  add_wms_nlnb_natte_natuurparels(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 2000),   add_wms_legend = FALSE,   ... )  add_wms_nlnb_ambitie_landschapstypen(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 2000),   add_wms_legend = FALSE,   ... )  add_wms_nlnb_ambitie_natuurtypen(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\"),   popupOptions = leaflet::popupOptions(maxWidth = 2000),   add_wms_legend = FALSE,   ... )  add_wms_nlnb_landschapstypen(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\", minZoom = 13),   popupOptions = leaflet::popupOptions(maxWidth = 2000),   add_wms_legend = FALSE,   ... )  add_wms_nlnb_natuurtypen(   map,   options = leaflet::WMSTileOptions(format = \"image/png\", transparent = TRUE, info_format     = \"text/html\", minZoom = 13),   popupOptions = leaflet::popupOptions(maxWidth = 2000),   add_wms_legend = FALSE,   ... )"},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"map map widget object created leaflet() layer String defines layer use, function supports one. case, available strings shown Usage section. first value used missing. options list extra options tile layers, popups, paths (circles, rectangles, polygons, ...), map elements ... arguments passed leaflet::addWMSTiles() leaflet.extras2::addWMS(). popupOptions Vector popupOptions provide popups add_wms_legend Logical. legend added WMS? Note legend toggled map; plotted separate, static legend. year Year applied selecting WMS","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"leaflet HTML widget object.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"condition functions continue maintained, using shorthand functions make scripts futureproof.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"prefixes","dir":"Reference","previous_headings":"","what":"Prefixes","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"be_ Belgium fl_ Flanders nl_ Netherlands nlnb_ Netherlands: Province 'Noord-Brabant'","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"background-layers","dir":"Reference","previous_headings":"","what":"Background layers","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"_ortho Orthophotographs _cartoweb Topographic Cartoweb layers (Belgium) _grbmap GRB basemap (Flanders; 'Grootschalig Referentiebestand')","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"feature-layers","dir":"Reference","previous_headings":"","what":"Feature layers","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"_habitatmap Natura 2000 habitat types _habitatlabels Natura 2000 habitat type labels _forestnature Public forest nature areas managed Flemish Nature & Forest Agency _agriculture Parcels agricultural use specific year _nnb Netherlands; 'Natuurnetwerk Brabant (Rijk en Provincie NNB)' _natte_natuurparels Netherlands; 'Natte natuurparels' _ambitie_landschapstypen Netherlands; 'Natuurbeheerplan - Ambitiekaart Landschaptypen' _ambitie_natuurtypen Netherlands; 'Natuurbeheerplan - Ambitiekaart Natuurtypen' _landschapstypen Netherlands; 'Natuurbeheerplan - Beheertypenkaart_Landschaptypen' _natuurtypen Netherlands; 'Natuurbeheerplan - Beheertypenkaart Natuurtypen'","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"Floris Vanderhaeghe, https://github.com/florisvdh","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addWMSTiles() and addWMS() wrapper functions for WMS services — add_wms_be_cartoweb","text":"","code":"library(leaflet) leaflet() |>   setView(lng = 4.5, lat = 51.45, zoom = 11) |>   add_wmts_nl_brt(\"grijs\") |>   add_wms_be_cartoweb(\"topo_grey\") |>   add_wms_fl_forestnature() |>   add_wms_nlnb_nnb()  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[51.45,4.5],11,[]],\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://service.pdok.nl/brt/achtergrondkaart/wmts/v2_0/grijs/EPSG:3857/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=https://www.nationaalgeoregister.nl>Nationaal Georegister<\\/a>\"}]},{\"method\":\"addWMSTiles\",\"args\":[\"https://cartoweb.wms.ngi.be/service\",null,null,{\"styles\":\"\",\"format\":\"image/png\",\"transparent\":true,\"version\":\"1.1.1\",\"attribution\":\"&copy; <a href=https://www.ngi.be/website/aanbod>Nationaal Geografisch Instituut<\\/a>\",\"layers\":\"topo_grey\"}]},{\"method\":\"addWMS\",\"args\":[\"https://www.mercator.vlaanderen.be/raadpleegdienstenmercatorpubliek/wms\",null,null,{\"styles\":\"\",\"format\":\"image/png\",\"transparent\":true,\"version\":\"1.1.1\",\"info_format\":\"text/html\",\"attribution\":\"&copy; <a href=https://www.vlaanderen.be/digitaal-vlaanderen/onze-oplossingen/geografische-webdiensten/ons-gis-aanbod>Digitaal Vlaanderen<\\/a>\",\"layers\":\"am:am_patdat\",\"checkempty\":false},{\"maxWidth\":600,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"className\":\"\"}]},{\"method\":\"addWMS\",\"args\":[\"https://atlas.brabant.nl/arcgis/services/natuurbeheerplan_vastgesteld/MapServer/WMSServer\",null,null,{\"styles\":\"\",\"format\":\"image/png\",\"transparent\":true,\"version\":\"1.1.1\",\"info_format\":\"text/html\",\"attribution\":\"&copy; <a href=https://georegister.brabant.nl>Provincie Noord-Brabant<\\/a>\",\"layers\":\"8\",\"checkempty\":false},{\"maxWidth\":600,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"className\":\"\"}]}]},\"evals\":[],\"jsHooks\":[]} # It can also use mapview objects, if you first extract the leaflet map slot: library(mapview) kmi_stations <- sf::read_sf(   system.file(\"extdata/kmi_stations.geojson\", package = \"inbospatial\") ) mapview(kmi_stations, map.types = \"CartoDB.Positron\")@map |>   add_wms_be_cartoweb()  {\"x\":{\"options\":{\"minZoom\":1,\"maxZoom\":52,\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"preferCanvas\":false,\"bounceAtZoomLimits\":false,\"maxBounds\":[[[-90,-370]],[[90,370]]]},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",\"CartoDB.Positron\",\"CartoDB.Positron\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"createMapPane\",\"args\":[\"point\",440]},{\"method\":\"addCircleMarkers\",\"args\":[[50.5819,50.8964,50.4544,51.1914,51.2214,50.1937,50.5108,49.6204,50.4786,50.0389,50.904,51.3474,51.3248,50.7969,50.7969,50.9155,50.6453,51.0751,51.2003,50.9803,50.7967,50.0954],[4.6892,4.5268,4.4421,4.4518,5.0272,5.2552,6.0734,5.5872,5.9099,5.4038,3.1217,3.2018,4.3638,4.3579,4.3579,5.4503,5.4587,4.5246,2.8873,3.816,4.3579,4.5946],6,null,\"kmi_stations\",{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"pane\":\"point\",\"stroke\":true,\"color\":\"#333333\",\"weight\":1,\"opacity\":0.9,\"fill\":true,\"fillColor\":\"#6666FF\",\"fillOpacity\":0.6},null,null,[\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>1&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6459.2002-05-22 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>ERNAGE&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6459&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>159.2&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2002-05-22 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>2&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6451.1952-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>ZAVENTEM/MELSBROEK&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6451&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 58.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1952-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>3&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6449.1962-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>GOSSELIES&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6449&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>192.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1962-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>4&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6450.1952-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>DEURNE&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6450&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 14.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1952-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>5&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6464.2002-02-14 01:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>RETIE&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6464&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 21.5&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2002-02-14 01:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>6&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6472.2002-04-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>HUMAIN&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6472&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>295.3&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2002-04-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>7&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6494.2001-04-12 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>MONT RIGI&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6494&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>673.2&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2001-04-12 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>8&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6484.2003-04-03 06:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>BUZENOL&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6484&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>323.9&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2003-04-03 06:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>9&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6490.1952-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>SPA (AERODROME)&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6490&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>482.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1952-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>10&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6476.1952-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>SAINT-HUBERT&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6476&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>557.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1952-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>11&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6414.2003-08-01 07:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>BEITEM&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6414&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 24.8&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2003-08-01 07:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>12&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6418.2005-12-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>ZEEBRUGGE&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6418&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 12.1&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2005-12-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>13&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6438.2012-08-05 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>STABROEK&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6438&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>  4.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2012-08-05 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>14&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6446.2001-08-23 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>UCCLE-UKKEL&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6446&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>100.6&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2001-08-23 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>2003-12-09 08:00:00&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>15&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6447.2003-12-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>UCCLE-UKKEL&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6447&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>100.6&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2003-12-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>16&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6477.2004-06-29 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>DIEPENBEEK&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6477&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 39.3&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2004-06-29 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>17&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6478.1952-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>BIERSET&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6478&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>178.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1952-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>18&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6439.2007-10-22 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>SINT-KATELIJNE-WAVER&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6439&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>  8.3&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2007-10-22 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>19&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6407.1955-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>MIDDELKERKE&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6407&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>  3.5&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1955-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>20&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6434.2003-04-02 06:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>MELLE&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6434&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td> 15.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2003-04-02 06:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>21&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6447.1952-01-01 00:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>UCCLE-UKKEL (FERME)&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6447&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>100.0&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>1952-01-01 00:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>2003-11-30 23:00:00&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>22&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>gml_id&emsp;<\\/th><td>synop_station.6455.2000-02-08 03:00:00+00&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>name&emsp;<\\/th><td>DOURBES&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>code&emsp;<\\/th><td>6455&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>altitude&emsp;<\\/th><td>234.8&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>date_begin&emsp;<\\/th><td>2000-02-08 03:00:00&emsp;<\\/td><\\/tr><tr><td>6<\\/td><th>date_end&emsp;<\\/th><td>NA&emsp;<\\/td><\\/tr><tr><td>7<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\"],{\"maxWidth\":800,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"closeOnClick\":true,\"className\":\"\"},[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addScaleBar\",\"args\":[{\"maxWidth\":100,\"metric\":true,\"imperial\":true,\"updateWhenIdle\":true,\"position\":\"bottomleft\"}]},{\"method\":\"addHomeButton\",\"args\":[2.8873,49.6204,6.0734,51.3474,true,\"kmi_stations\",\"Zoom to kmi_stations\",\"<strong> kmi_stations <\\/strong>\",\"bottomright\"]},{\"method\":\"addLayersControl\",\"args\":[\"CartoDB.Positron\",\"kmi_stations\",{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#6666FF\"],\"labels\":[\"kmi_stations\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":1,\"position\":\"topright\",\"type\":\"factor\",\"title\":\"\",\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":\"kmi_stations\"}]},{\"method\":\"addWMSTiles\",\"args\":[\"https://cartoweb.wms.ngi.be/service\",null,null,{\"styles\":\"\",\"format\":\"image/png\",\"transparent\":true,\"version\":\"1.1.1\",\"attribution\":\"&copy; <a href=https://www.ngi.be/website/aanbod>Nationaal Geografisch Instituut<\\/a>\",\"layers\":\"topo\"}]}],\"limits\":{\"lat\":[49.6204,51.3474],\"lng\":[2.8873,6.0734]},\"fitBounds\":[49.6204,2.8873,51.3474,6.0734,[]]},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (\\n      function(el, x, data) {\\n      // get the leaflet map\\n      var map = this; //HTMLWidgets.find('#' + el.id);\\n      // we need a new div element because we have to handle\\n      // the mouseover output separately\\n      // debugger;\\n      function addElement () {\\n      // generate new div Element\\n      var newDiv = $(document.createElement('div'));\\n      // append at end of leaflet htmlwidget container\\n      $(el).append(newDiv);\\n      //provide ID and style\\n      newDiv.addClass('lnlt');\\n      newDiv.css({\\n      'position': 'relative',\\n      'bottomleft':  '0px',\\n      'background-color': 'rgba(255, 255, 255, 0.7)',\\n      'box-shadow': '0 0 2px #bbb',\\n      'background-clip': 'padding-box',\\n      'margin': '0',\\n      'padding-left': '5px',\\n      'color': '#333',\\n      'font': '9px/1.5 \\\"Helvetica Neue\\\", Arial, Helvetica, sans-serif',\\n      'z-index': '700',\\n      });\\n      return newDiv;\\n      }\\n\\n\\n      // check for already existing lnlt class to not duplicate\\n      var lnlt = $(el).find('.lnlt');\\n\\n      if(!lnlt.length) {\\n      lnlt = addElement();\\n\\n      // grab the special div we generated in the beginning\\n      // and put the mousmove output there\\n\\n      map.on('mousemove', function (e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                           ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                           ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                           ' | zoom: ' + map.getZoom() +\\n                           ' | x: ' + L.CRS.EPSG3857.project(e.latlng).x.toFixed(0) +\\n                           ' | y: ' + L.CRS.EPSG3857.project(e.latlng).y.toFixed(0) +\\n                           ' | epsg: 3857 ' +\\n                           ' | proj4: +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs ');\\n      } else {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      }\\n      });\\n\\n      // remove the lnlt div when mouse leaves map\\n      map.on('mouseout', function (e) {\\n      var strip = document.querySelector('.lnlt');\\n      if( strip !==null) strip.remove();\\n      });\\n\\n      };\\n\\n      //$(el).keypress(67, function(e) {\\n      map.on('preclick', function(e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      var txt = document.querySelector('.lnlt').textContent;\\n      console.log(txt);\\n      //txt.innerText.focus();\\n      //txt.select();\\n      setClipboardText('\\\"' + txt + '\\\"');\\n      }\\n      });\\n\\n      }\\n      ).call(this.getMap(), el, x, data);\\n}\",\"data\":null},{\"code\":\"function(el, x, data) {\\n  return (function(el,x,data){\\n           var map = this;\\n\\n           map.on('keypress', function(e) {\\n               console.log(e.originalEvent.code);\\n               var key = e.originalEvent.code;\\n               if (key === 'KeyE') {\\n                   var bb = this.getBounds();\\n                   var txt = JSON.stringify(bb);\\n                   console.log(txt);\\n\\n                   setClipboardText('\\\\'' + txt + '\\\\'');\\n               }\\n           })\\n        }).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}# alternative syntax: if (FALSE) { # \\dontrun{ mapview(kmi_stations, map.types = \"CartoDB.Positron\") |>   _@map |>   add_wms_be_cartoweb() } # }"},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":null,"dir":"Reference","previous_headings":"","what":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"add_wmts_*() functions shorthand alternatives fully specified leaflet::addTiles() statement. Appropriate attribution added Leaflet map depending layer.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"","code":"add_wmts_nl_brt(map, layer = c(\"standaard\", \"grijs\", \"pastel\", \"water\"), ...)  add_wmts_nl_ortho(map, ...)"},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"map map widget object created leaflet() layer String defines layer use, function supports one. case, available strings shown Usage section. first value used missing. ... arguments passed leaflet::addTiles().","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"leaflet HTML widget object.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"condition functions continue maintained, using shorthand functions make scripts futureproof.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"prefixes","dir":"Reference","previous_headings":"","what":"Prefixes","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"be_ Belgium nl_ Netherlands","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"suffixes","dir":"Reference","previous_headings":"","what":"Suffixes","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"_ortho Orthophotographs _brt Topographic BRT layers (Netherlands; 'Basisregistratie Topografie')","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"Floris Vanderhaeghe, https://github.com/florisvdh","code":""},{"path":"https://inbo.github.io/inbospatial/reference/add_wmts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addTiles() wrapper functions for WMTS services — add_wmts_nl_brt","text":"","code":"library(leaflet) leaflet() |>   setView(lng = 5.5, lat = 52.5, zoom = 9) |>   add_wmts_nl_brt()  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[52.5,5.5],9,[]],\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://service.pdok.nl/brt/achtergrondkaart/wmts/v2_0/standaard/EPSG:3857/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=https://www.nationaalgeoregister.nl>Nationaal Georegister<\\/a>\"}]}]},\"evals\":[],\"jsHooks\":[]}leaflet() |>   setView(lng = 5.4, lat = 52.2, zoom = 14) |>   add_wmts_nl_ortho()  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[52.2,5.4],14,[]],\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://service.pdok.nl/hwh/luchtfotorgb/wmts/v1_0/Actueel_orthoHR/EPSG:3857/{z}/{x}/{y}.jpeg\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=https://www.nationaalgeoregister.nl>Nationaal Georegister<\\/a>\"}]}]},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://inbo.github.io/inbospatial/reference/coneconst_lcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the cone constant for a normal LCC projection — coneconst_lcc","title":"Calculate the cone constant for a normal LCC projection — coneconst_lcc","text":"Calculate cone constant normal LCC projection","code":""},{"path":"https://inbo.github.io/inbospatial/reference/coneconst_lcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the cone constant for a normal LCC projection — coneconst_lcc","text":"","code":"coneconst_lcc(par1, par2)"},{"path":"https://inbo.github.io/inbospatial/reference/get_coverage_wcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","title":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","text":"function sends query WCS service, downloads temporary file read terra::rast() - needed reprojected - returned SpatRaster object","code":""},{"path":"https://inbo.github.io/inbospatial/reference/get_coverage_wcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","text":"","code":"get_coverage_wcs(   wcs = c(\"dtm\", \"dsm\", \"omz\", \"omw\", \"dhmv\"),   bbox,   layername,   resolution,   wcs_crs = c(\"EPSG:4258\", \"EPSG:31370\"),   output_crs = \"EPSG:31370\",   bbox_crs = \"EPSG:31370\",   version = c(\"1.0.0\", \"2.0.1\"),   ... )"},{"path":"https://inbo.github.io/inbospatial/reference/get_coverage_wcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","text":"wcs One \"dtm\", \"dsm\", \"omz\", \"omw\", \"dhmv\" bbox object class bbox length 4. layername Character string; name layer resolution Output resolution meters wcs_crs Native CRS raster layers stored WCS output_crs Output CRS. May involve reprojection. bbox_crs CRS bbox coordinates passed version WCS version used. ... Additional key-value pairs passed WCS query","code":""},{"path":"https://inbo.github.io/inbospatial/reference/get_coverage_wcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","text":"SpatRaster object","code":""},{"path":"https://inbo.github.io/inbospatial/reference/get_coverage_wcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","text":"following WCS services can currently used: \"omz\": orthophotomosaic summer images Flanders \"omw\": orthophotomosaic winter images Flanders \"dtm\": digital terrain model Flanders \"dsm\": digital surface model Flanders \"dhmv\": digital elevation model Flanders (contains dtm dsm data) information, see metadata Vlaanderen: https://metadata.vlaanderen./srv/eng/catalog.search#/search?=WCS","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/get_coverage_wcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a layer from a web coverage service within a bounding box — get_coverage_wcs","text":"","code":"if (FALSE) { # \\dontrun{ bbox <- sf::st_bbox(   c(xmin = 155800, xmax = 155850, ymin = 132700, ymax = 132750),   crs = sf::st_crs(31370) ) get_coverage_wcs(   wcs = \"dsm\",   bbox = bbox,   layername = \"EL.GridCoverage.DSM\",   resolution = 1 ) } # }"},{"path":"https://inbo.github.io/inbospatial/reference/get_feature_wfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a layer from a web feature service — get_feature_wfs","title":"Get a layer from a web feature service — get_feature_wfs","text":"function constructs URL request arguments either reads resulting vector layer sf object returns number features requested. request made key-value pairs additional key-value pairs can passed function. full documentation WFS standard can consulted https://www.ogc.org/publications/standard/wfs/.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/get_feature_wfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a layer from a web feature service — get_feature_wfs","text":"","code":"get_feature_wfs(   wfs,   version = \"2.0.0\",   layername = NULL,   crs = NULL,   bbox = NULL,   filter = NULL,   cql_filter = NULL,   output_format = NULL,   property_name = NULL,   result_type = c(\"results\", \"hits\"),   ... )"},{"path":"https://inbo.github.io/inbospatial/reference/get_feature_wfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a layer from a web feature service — get_feature_wfs","text":"wfs Web address service want query features version Version number service. instance \"2.0.0\". layername Optional name layer hosted web feature service crs Optional coordinate reference system represent features. instance \"EPSG:31370\". bbox Optional bounding box. Pass named vector names \"xmin\", \"xmax\", \"ymin\", \"ymax\". filter Optional standard OGC filter specification cql_filter Optional Contextual Query Language filter. currently works WFS hosted GeoServer. output_format Optional output format supported WFS. property_name Optional character string. fields columns return? want specify multiple columns, separate comma. column containing feature geometry usually called geom, geometry SHAPE. result_type version \"2.x.x\", can either \"results\" (default) \"hits\". former returns requested features, latter returns number requested features. ... Additional key-value pairs passed WFS query.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/get_feature_wfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a layer from a web feature service — get_feature_wfs","text":"See https://tutorials.inbo./tutorials/spatial_wfs_services/ information.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/get_feature_wfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a layer from a web feature service — get_feature_wfs","text":"","code":"if (FALSE) { # \\dontrun{ vlaanderen <- get_feature_wfs(   wfs = paste0(     \"https://eservices.minfin.fgov.be/\",     \"arcgis/services/R2C/Regions/MapServer/WFSServer\"   ),   layername = \"regions\",   crs = \"EPSG:31370\",   filter = paste0(     \"<Filter><PropertyIsEqualTo><PropertyName>\",     \"regions:NameDUT<\/PropertyName><Literal>'Vlaams Gewest'\",     \"<\/Literal><\/PropertyIsEqualTo><\/Filter>\"   ) ) } # }"},{"path":"https://inbo.github.io/inbospatial/reference/inbospatial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"inbospatial: A Collection of Useful R Functions for Spatial Data — inbospatial-package","title":"inbospatial: A Collection of Useful R Functions for Spatial Data — inbospatial-package","text":"Useful R functions developed Research Institute Nature Forest (INBO) dealing spatial raster vector data.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/inbospatial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"inbospatial: A Collection of Useful R Functions for Spatial Data — inbospatial-package","text":"Maintainer: Hans Van Calster hans.vancalster@inbo.(ORCID) (Research Institute Nature Forest (INBO)) contributors: Floris Vanderhaeghe floris.vanderhaeghe@inbo.(ORCID) (Research Institute Nature Forest (INBO)) [contributor] Falk Mielke falk.mielke@inbo.(ORCID) (Research Institute Nature Forest (INBO)) [contributor] Research Institute Nature Forest (INBO) info@inbo.[copyright holder, funder]","code":""},{"path":"https://inbo.github.io/inbospatial/reference/require_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check availability of required packages — require_pkgs","title":"Check availability of required packages — require_pkgs","text":"Takes vector package names passes name requireNamespace(); package(s) missing, returns error message providing basic install.packages() command install .","code":""},{"path":"https://inbo.github.io/inbospatial/reference/require_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check availability of required packages — require_pkgs","text":"","code":"require_pkgs(pkgs)"},{"path":"https://inbo.github.io/inbospatial/reference/require_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check availability of required packages — require_pkgs","text":"pkgs character vector package names.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/require_pkgs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check availability of required packages — require_pkgs","text":"Floris Vanderhaeghe, https://github.com/florisvdh","code":""},{"path":"https://inbo.github.io/inbospatial/reference/require_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check availability of required packages — require_pkgs","text":"","code":"if (FALSE) { # \\dontrun{ require_pkgs(c(\"a\", \"base\", \"b\", \"c\")) } # }"},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"scale factor distance distortion. case (conic conformal projection) holds direction.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"","code":"scalefactor_lcc(par_deg, par1_deg, par2_deg)"},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"par_deg Numeric vector. latitude decimal degrees one parallels calculation. par1_deg Latitude first standard parallel LCC projection decimal degrees. par2_deg Latitude second standard parallel LCC projection decimal degrees.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"Numeric vector, length par_deg.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"function applies normal LCC projections, oblique ones. applied formulas sphere, hence approximate.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"Snyder J.P. (1987). Map Projections - Working Manual. U.S. Geological Survey Professional Paper, Nr. 1395. United States Government Printing Office, Washington, 397 p.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"Floris Vanderhaeghe, https://github.com/florisvdh","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_lcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the scale factor for a specific parallel in a Lambert Conic Conformal projection — scalefactor_lcc","text":"","code":"sf::st_crs(31370) #> Coordinate Reference System: #>   User input: EPSG:31370  #>   wkt: #> PROJCRS[\"BD72 / Belgian Lambert 72\", #>     BASEGEOGCRS[\"BD72\", #>         DATUM[\"Reseau National Belge 1972\", #>             ELLIPSOID[\"International 1924\",6378388,297, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4313]], #>     CONVERSION[\"Belgian Lambert 72\", #>         METHOD[\"Lambert Conic Conformal (2SP)\", #>             ID[\"EPSG\",9802]], #>         PARAMETER[\"Latitude of false origin\",90, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",4.36748666666667, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",51.1666672333333, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",49.8333339, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",150000.013, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",5400088.438, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Belgium - onshore.\"], #>         BBOX[49.5,2.5,51.51,6.4]], #>     ID[\"EPSG\",31370]] x <- seq(49.5, 52.5, 0.1) y <- scalefactor_lcc(x, 51.1666672333333, 49.8333339) data.frame(latitude = x, scalefactor = y) #>    latitude scalefactor #> 1      49.5   1.0000840 #> 2      49.6   1.0000553 #> 3      49.7   1.0000296 #> 4      49.8   1.0000069 #> 5      49.9   0.9999872 #> 6      50.0   0.9999705 #> 7      50.1   0.9999568 #> 8      50.2   0.9999461 #> 9      50.3   0.9999385 #> 10     50.4   0.9999339 #> 11     50.5   0.9999323 #> 12     50.6   0.9999338 #> 13     50.7   0.9999383 #> 14     50.8   0.9999459 #> 15     50.9   0.9999566 #> 16     51.0   0.9999703 #> 17     51.1   0.9999871 #> 18     51.2   1.0000070 #> 19     51.3   1.0000300 #> 20     51.4   1.0000560 #> 21     51.5   1.0000852 #> 22     51.6   1.0001175 #> 23     51.7   1.0001530 #> 24     51.8   1.0001915 #> 25     51.9   1.0002332 #> 26     52.0   1.0002781 #> 27     52.1   1.0003261 #> 28     52.2   1.0003772 #> 29     52.3   1.0004315 #> 30     52.4   1.0004890 #> 31     52.5   1.0005497"},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"scale factor distance distortion direction meridians. case Transverse Mercator projection (cylindrical conformal projection) holds direction.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"","code":"scalefactor_tcyl(ang_dist)"},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"ang_dist Numeric vector. One angular distances central meridian, decimal degrees.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"Numeric vector, length ang_dist.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"formulas applied sphere, hence approximate. best known map projection system context Universal Transverse Mercator (UTM), superposes central meridian scale factor 0.9996.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"Iliffe J. & Lott R. (2008). Datums Map Projections. Remote Sensing, GIS Surveying. 2nd edn. Whittles Publishing, Caithness, UK, 208 p.","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"Floris Vanderhaeghe, https://github.com/florisvdh","code":""},{"path":"https://inbo.github.io/inbospatial/reference/scalefactor_tcyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the scale factor for the angular distance from the central meridian in an (unscaled) transverse cylindrical projection — scalefactor_tcyl","text":"","code":"x <- seq(0, 3, 0.1) y <- scalefactor_tcyl(x) data.frame(ang_dist = x, scalefactor = y) #>    ang_dist scalefactor #> 1       0.0    1.000000 #> 2       0.1    1.000002 #> 3       0.2    1.000006 #> 4       0.3    1.000014 #> 5       0.4    1.000024 #> 6       0.5    1.000038 #> 7       0.6    1.000055 #> 8       0.7    1.000075 #> 9       0.8    1.000097 #> 10      0.9    1.000123 #> 11      1.0    1.000152 #> 12      1.1    1.000184 #> 13      1.2    1.000219 #> 14      1.3    1.000257 #> 15      1.4    1.000299 #> 16      1.5    1.000343 #> 17      1.6    1.000390 #> 18      1.7    1.000440 #> 19      1.8    1.000494 #> 20      1.9    1.000550 #> 21      2.0    1.000610 #> 22      2.1    1.000672 #> 23      2.2    1.000738 #> 24      2.3    1.000806 #> 25      2.4    1.000878 #> 26      2.5    1.000953 #> 27      2.6    1.001030 #> 28      2.7    1.001111 #> 29      2.8    1.001195 #> 30      2.9    1.001282 #> 31      3.0    1.001372"},{"path":"https://inbo.github.io/inbospatial/reference/unpack_mht.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack or extract the tif file part from an mht file. — unpack_mht","title":"Unpack or extract the tif file part from an mht file. — unpack_mht","text":"helper function needed WCS services mht file downloaded rather tif file; returns path tif","code":""},{"path":"https://inbo.github.io/inbospatial/reference/unpack_mht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack or extract the tif file part from an mht file. — unpack_mht","text":"","code":"unpack_mht(path)"},{"path":"https://inbo.github.io/inbospatial/reference/unpack_mht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack or extract the tif file part from an mht file. — unpack_mht","text":"path path mht file","code":""},{"path":"https://inbo.github.io/inbospatial/reference/unpack_mht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack or extract the tif file part from an mht file. — unpack_mht","text":"tif_path path extracted geoTIFF.","code":""},{"path":"https://inbo.github.io/inbospatial/reference/unpack_mht.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unpack or extract the tif file part from an mht file. — unpack_mht","text":"Need three ways read mht file get tif file . read_lines() read lines due embedded nulls. Therefore, also read_lines_raw() needed positioning tif part file. write_lines() work correctly lines_raw[start:end] possibly bug edge case write_lines() Therefore, also read_file_raw() needed extract raw vector","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"features-0-0-3","dir":"Changelog","previous_headings":"","what":"Features","title":"inbospatial 0.0.3","text":"get_coverage_wcs() can now query data Digital Elevation Model, Flanders (DHMV, Digitaal Hoogtemodel Vlaanderen).","code":""},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"documentation-0-0-3","dir":"Changelog","previous_headings":"","what":"Documentation","title":"inbospatial 0.0.3","text":"added spatial_dhmv_query vignette demonstrating WCS queries beyond get_coverage_wcs()","code":""},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"inbospatial 0.0.3","text":"fix parsing geoTIFF part mht files (internal function)","code":""},{"path":[]},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"new-functions-0-0-2","dir":"Changelog","previous_headings":"","what":"New functions","title":"inbospatial 0.0.2","text":"utility functions calculate distance distortions projection methods add_wms_*()add_wmts_*() family functions, shorthand alternatives fully specified leaflet::addWMSTiles(), leaflet.extras2::addWMS() leaflet::addTiles() statement.","code":""},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"enhancements-0-0-2","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"inbospatial 0.0.2","text":"updated vignette demonstrating get_features_wfs() get_coverage_wcs() improved error handling get_features_wfs() (#3)","code":""},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"bug-fixes-0-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"inbospatial 0.0.2","text":"Minor changes fix failing GitHub actions","code":""},{"path":"https://inbo.github.io/inbospatial/news/index.html","id":"inbospatial-001","dir":"Changelog","previous_headings":"","what":"inbospatial 0.0.1","title":"inbospatial 0.0.1","text":"Added NEWS.md file track changes package. New function get_features_wfs get features (vector data) Web Feature Service (WFS) New function get_coverage_wcs get raster data Web Coverage Service (WCS)","code":""}]
